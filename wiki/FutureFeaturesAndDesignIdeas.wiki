#summary A place to collect future features and design ideas.
#labels Featured

= Future features and design ideas =

Things that would be nice:

= Pectin Core =
==Field bindings==
It would be nice to support !ValueModelProviders that have type aware keys.  That way I can use something like `FieldModel<String> name = fieldBoundTo(provider, key)`.  The `fieldOfType(String.class).boundTo/create` syntax would still remain for existing use cases. 

==Widget Bindings==
Would probably nice to add value interceptors to the bindings.  This would be a more formalised way for watermarks to change the displayed value under certain conditions. 

==Formatted fields==
Currently formatted fields don't get a chance to re-format the value the user entered with out using a deferred command (since the binding ignores model changes during the update).  The formatted field could probably handle this internally by checking the text version with a freshly formatted version and doing the deferred command thing itself, but I'd rather not use a deferred command at all if possible.   


= Plugins =
==!SelectionPlugin== 
Bring focus/blur and field selection into the presentation layer.  `selectionModel.addSelectionHandler(...)`, `selectionModel.select(firstName)`.  A typical use case would be focussing a field with validation errors.  I would imagine something like `selectionModel.select(validationManager.getFirstFieldWithErrors())`.  There are issues to consider here with multi-field widgets etc but by using nested form models I think we can get around most cases.

==!ValidationPlugin enhancements== 
Proper async validation support, see DesignAsynchronousValidation.

Would also nice to support validation triggers like ON_BLUR, ON_EDIT etc.

==!UndoPlugin==
Wouldn't be too hard to implement at least basic undo/redo support.  Could also work with the selection model if required.

=!UiCommand/!ViewCallbacks=
I've ditched this idea in favour of Activies.

=Activities=
In reading about other async efforts using activites I thought I'd try something similar.  I'm trialing an `Activity` that acts like a data pipe that contains 2 downstream channels (for the result and error) and an optional upstream channel for parameters.  I'm currently have two subtypes `ExecutableActivity` (no parameters that implements `Command`) and a `ParameterisedActivity` that can be curried into and `ExecutableActivity` when given a `Source<T>`.

By using Activities the activity behaviour can be created out side the presentation layer and passed into it.  The various parts of the presentation layer can use what ever bits they like.  Models can inject results into fields (`activity.sendResultTo(someField)`), views can bind activities to buttons (`buttonBinder.bind(executableActivity).to(button).andDisabledWhileActive()`) or show messages when the result comes back or if an error occurs (`activity.sendErrorTo(someErrorDisplay)`) where `someErrorDisplay` implements `Sink<Message>`.  I should also be able transform the channels so you can convert results or errors to messages.

An example of an `ExecutableActivity` that invokes an RPC service would be

{{{
/**
 * This activity implementation just performs a simple get on an async service. 
 */
public class GenerateAccessKeyActivity extends AbstractExecutableActivity<String, Throwable>
{
   private AdminServiceAsync adminService;

   public GenerateAccessKeyActivity(AdminServiceAsync adminService)
   {
      this.adminService = adminService;
   }

   @Override
   protected void performActivity(final Channel<String> resultChannel, final Channel<Throwable> errorChannel)
   {
      adminService.generateAccessCode(new AsyncCallback<String>()
      {

         public void onSuccess(String result)
         {
            resultChannel.send(result);
         }

         public void onFailure(Throwable caught)
         {
            // could perform some exception handling/conversion here if 
            // we wanted to.
            errorChannel.send(caught);
         }
      });
   }

}

}}}

I also hope to allow the view to add interceptors to activities such that I can do something like:
{{{
executableActivity.addInterceptor(new Interceptor()
{
   public void intercept(Interception interception)
   {
      // ask our view (via the display callback) to ask a question.
      messageDisplay.ask("Do you really wish to generate a new access code?",
                         "Changing the access code will prevent access using the old code.",
                         "These changes will take effect after you save your changes.")
         .onChoosingDestructiveOption("Yes change the access code").thenExecute(interception.proceedCommand())
         .onChoosingDefault(Option.CANCEL_OPTION).thenExecute(interception.cancelCommand())
         .show();
   }
}
}}}    

I'm not sure if I should implement this case as a activity chain or not.  It's early days... and there's a lot to think about in terms handler registrations etc. 


=Would Like to but...=
== Native !UiBinder support==
Not even sure if it's possible yet.

==Integration with Drag&Drop layout tools==
And in my dreams... it would be to drag value models onto widgets and have the bind(model.name).to(firstName) automagically done.  I'd get to use visual layout tool (where it makes sense) and keep my OO models...