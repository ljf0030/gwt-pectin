#summary A place to collect future features and design ideas.
#labels Featured

= Future features and design ideas =

Things that would be nice:

= Pectin Core =
==Field bindings==
It would be nice to support !ValueModelProviders that have type aware keys.  That way I can use something like `FieldModel<String> name = fieldBoundTo(provider, key)`.  The `fieldOfType(String.class).boundTo/create` syntax would still remain for existing use cases. 

==Widget Bindings==
Would probably nice to add value interceptors to the bindings.  This would be a more formalised way for watermarks to change the displayed value under certain conditions. 

== Support !ValueModels bindings without !FormModels ==  
I'd also like to support binding directly to `ValueModel` and `ListModel` for the cases where you don't need the additional functionalities (or overhead) of forms and plugins.

This is implemented in 0.8.

==Formatted fields==
Currently formatted fields don't get a chance to re-format the value the user entered with out using a deferred command (since the binding ignores model changes during the update).  The formatted field could probably handle this internally by checking the text version with a freshly formatted version and doing the deferred command thing itself, but I'd rather not use a deferred command at all if possible.   

==!BeanModelProvider Wish List== 
===Validation Support===
It would be nice if !BeanModelProvider supported JSR 303 style validation.  This would allow a reflection variant of the provider to be used on the server to perform validation.  This is a fair bit of work but would support unified server side and client side validation.  I'm holding off on this to see how Google's !ValueStore proceeds.  I'm also not sure how to handle conditional validation.

===Diffs===
It might be possible for the provider to support 'diffing' between two beans.  This would allow you to present what has changed to the user when handling stale entity exceptions.

===Compile Time Safety===
It might also also be possible to support compile time type safety using annotations.  E.g.
{{{
public class PersonProvider extends BeanModelProvider<Person> {
   // automatically bound to "firstName" 
   MutableValueModel<String> firstName;

   // specifies a property different from the value model name.
   @Path("surname")
   MutableValueModel<String> lastName;
}
}}} 

If this is the case then the following would be possible.
{{{
// use in a FormModel
fieldOfType(String.class).boundTo(personProvider.firstName);
// or directly bound
binder.bind(personProvider.firstName).to(someField);
}}}

= Plugins =
==!SelectionPlugin== 
Bring focus/blur and field selection into the presentation layer.  `selectionModel.addSelectionHandler(...)`, `selectionModel.select(firstName)`.  A typical use case would be focussing a field with validation errors.  I would imagine something like `selectionModel.select(validationManager.getFirstFieldWithErrors())`.  There are issues to consider here with multi-field widgets etc but by using nested form models I think we can get around most cases.

==!ValidationPlugin enhancements== 
Proper async validation support, see DesignAsynchronousValidation.

Would also nice to support validation triggers like ON_BLUR, ON_EDIT etc.  See https://wave.google.com/wave/?nouacheck&pli=1#restored:wave:googlewave.com!w%252BvIXX8JY-A

==!UndoPlugin==
Wouldn't be too hard to implement at least basic undo/redo support.  Could also work with the selection model if required.

=Would Like to but...=
== Native !UiBinder support==
Still not sure if this is possible, but here's what we'd like to be able to do: https://wave.google.com/wave/?nouacheck#restored:wave:googlewave.com%252Fw%252BCE2z1X_0A


==Integration with Drag&Drop layout tools==
And in my dreams... it would be to drag value models onto widgets and have the bind(model.name).to(firstName) automagically done.  I'd get to use visual layout tool (where it makes sense) and keep my OO models...