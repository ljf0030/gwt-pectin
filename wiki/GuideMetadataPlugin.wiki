#summary Guide to the Metadata Plugin
#sidebar TableOfContents

= Metadata Plugin =

The `MetadataPlugin` provides adds basic metadata support including enabledness, visibility and watermarks.

The plugin is accessed by importing the static methods of `MetadataPlugin` into your form model.  Once you've defined the metadata for you model the bindings automatically configure your components during the normal binding process (i.e. when you're using `WidgetBinder`).

== Key Classes ==
The key classes of the plugin are:
  * `MetadataPlugin` - provides static methods controlling and accessing metadata
  * `MetadataBinder` - provides additional methods to support binding metadata to additional widgets.

== Enabled Example ==

To control the enabled state of you fields you use the `enable` and `disable` methods of the plugin.  Each method takes a field and condition.  The condition can be any `ValueModel<Boolean>`.

Static methods defined by `MetadataPlugin`.
{{{
  enable(FieldModel<?>).when(ValueModel<Boolean>);
  disable(FieldModel<?>).when(ValueModel<Boolean>);
}}}


In your `FormModel`
{{{
  // import the plugin methods
  import static com.pietschy.gwt.pectin.metadata.MetadataPlugin.*;

  // create our models
  shipToDifferentAddress = fieldOfType(Boolean.class).boundTo(...);
  shippingAddressLineOne = fieldOfType(String.class).boundTo(...);

  // now use the static methods of MetadataPlugin (imported previously) to
  // bind the enabled state to the value of another field
  enable(shippingAddressLineOne).when(shipToDifferentAddress);  
}}}

Then in your view you use the `WidgetBinder` as per normal.

{{{
WidgetBinder binder = new WidgetBinder();

binder.bind(model.shipToDifferentAddress).to(shipToDifferentAddressCheckBox);
binder.bind(model.shippingAddressLineOne).to(shippingAddressLineOne);

}}}

== Visibility Example ==

To control the visibilty of fields you use the `show` and `hide` methods of the plugin.  Each method takes a field and condition.  The condition can be any `ValueModel<Boolean>`.

Static methods defined by `MetadataPlugin`.
{{{
  show(FieldModel<?>).when(ValueModel<Boolean>);
  hide(FieldModel<?>).when(ValueModel<Boolean>);
}}}


In your `FormModel`
{{{
  // import the plugin methods
  import static com.pietschy.gwt.pectin.metadata.MetadataPlugin.*;

  // create our models
  hasComments = fieldOfType(Boolean.class).boundTo(...);
  comments = fieldOfType(String.class).boundTo(...);

  // now use the static methods of MetadataPlugin (imported previously) to
  // bind the enabled state to the value of another field
  show(comments).when(hasComments);  
}}}

In your View:
{{{
WidgetBinder binder = new WidgetBinder();

binder.bind(model.hasComments).to(commentsCheckBox);
binder.bind(model.comments).to(comments);
}}}

== Watermarks ==
Watermarks allow you to add a water mark text boxes that are bound to `FieldModel<String>` or `FormattedFieldModel<?>`.  Watermarks can be either static strings or values held by other value models.

Static methods defined by `MetadataPlugin`.  All methods also apply to `FormattedFieldModel<?>`

{{{
  // static watermarks 
  watermark(FieldModel<String>).with(String);

  // dynamic watermarks
  watermark(FieldModel<String>).with(ValueModel<String>);

  // dynamic watermarks from artibrary value models
  watermark(FieldModel<String>).withValueOf(ValueModel<?>);  
  watermark(FieldModel<String>).withValueOf(ValueModel<T>).formattedBy(Function<String, ? super T>);
  watermark(FieldModel<String>).withValueOf(ValueModel<T>).formattedBy(DisplayFormat<? super T>);

  
}}}

There are also var-arg versions of the `watermark()` method so you can watermark multiple fields with the same value if required.
 
{{{
watermark(email, fax).with("Optional");
}}} 

== Controlling Other Widgets ==
There will be cases where you need to apply the metadata of one field to multiple widgets (e.g. the fields label).  In this case the plugin provides a number of useful methods.

=== `MetadataBinder` ===
The `MetadataBinder` provides methods for applying metadata state to arbitrary widgets.  

{{{
MetadataBinder metadata = new MetadataBinder();

metadata.bindVisibilityOf(formModel.extraComments).to(extraCommentsLabel);
}}} 

The binder also allows you to control the enabledness and visibility of an arbitrary widget from an arbitrary `ValueModel<Boolean>` (including `FieldModel<Boolean>`).

{{{
ValueModel<Boolean> someModel = ...;
metadata.bindValueOf(someModel).toVisibilityOf(someWidget);
}}}

=== `MetadataPlugin.metadataOf` ===

The static `MetadataPlugin.metadataOf(Field)` provides access to value models that reflect the metadata state of the specified field.  This can be used by the `StyleBinder` to track metadata within the view.

{{{
StyleBinder style = new StyleBinder();
style.style(nameLabel).with("disabled")
     .when(metadataOf(model.name).isDisabled());
}}}