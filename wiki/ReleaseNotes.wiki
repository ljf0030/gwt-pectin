#summary Pectin Release Notes

== Next Release ==
  * __Breaking Changes__ to BeanModelProvider
    * Refactored `BeanModelProvider` code into three separate types.
      # `BeanModelProvider` - as before but without the autocommit capabilities
      # `AutoCommitBeanModelProvider` - new provider that always writes value changes to the underlying bean
      # `CopyingBeanModelProvider` -  a new provider to copies state two and from beans.  This provider is useful for updating cloned instances and allows the dirty state to be updated at some time after the update (i.e. after a successful RPC call)
    * The various providers now barf if you try and write to a read only property.
    * Providers now check and enforce collection elements types (issue 13).
  * Updated `BeanModelProvider` dirty models to no longer fire events when `dirtyModel.setValue(..)` is called with the same value.
  * Updated `AbstractDynamicList` constructor to take the text of the remove link.  
  * Updated `WidgetBinder.toLabel(HasText)` methods to use default formats.  E.g. `binder.bind(model.gender).to(myLabel)` will use the default `ToStringFormat`.  To specify a different format you can call `binder.bind(model.gender).to(myLabel).withFormat(genderFormat)`.
  * Cleaned and refactored `WidgetBinder` infrastructure.  `BindingCallback` has been simplified and various builders updated to be more consistent.
  * Moved `CollectionToStringFormat` and `ToStringFormat` to the format package.
  * Fixed the generics on  `ReducingValueModel`, `Reduce` and `ListDisplayFormat` so creating default `ToString` style functions and formats works on collections without casting.  See [http://pietschy.com/blog/2010/02/using-extends-t-and-super-t-for-reduce-style-functions-that-operate-on-collections/ this blog entry if you're interested].
  * Updated `ReducingValueModel` to support run time changes to the `Reduce` function.
  * Added `ReducingValueModel.recomputeAfterRunning(Runnable)` to allow for multiple changes to the source models or function while triggering only one value change event. 
  * Added `TestUtil` class and `RefectionBeanModelProvider` to facilitate JVM based unit tests.

== Release 0.5 ==
  * Removed var-arg methods from `AbstractDynamicList` to work around GWT 2 compiler problem (issue 10).
  * Updated computed fields to support functions that convert from any super of the source model type.  I.e. this allows for the use of a generic `ToStringFunction` for any type of source model. 
  * Added default implementation of a `ToStringFunction`.
  * Updated `ComputedValueModel` to expose getters and setters for the function.
  * Added support for watermarks derived from arbitrary value models as per issue 9.
  * Added var-args watermark methods so you can do things like `watermark(name, email).with("Required")`.
  * Introducing new `FieldModelBase` and `ListFieldModelBase` types so that the API can safely distinguish between formatted and regular variants of each model type.
  * Simplified validation plugin API based on the above changes.
  * Added `FormValidator` class that can be used to track the validation messages of all the fields in the form.  So now you can bind the formModel to a `ValidationDisplay`.  E.g. `validationBinder.bind(formModel).to(errorMessageWidget)`.
  * Updated `FormattedFieldValidatorImpl` to only validate the value if there were no errors logged by the text validators.  This can be overridden if required.
  * Fixed a bug where `ValidationDisplayLabel` wasn't clearing existing validation styles.


== Release 0.4 ==
  * Changed version numbering to something more sane.
  * Added new `FormattedListFieldModel` that allows binding of non-string `ListModels` to `HasValue<Collection<String>>`.
  * Added `TextSplitter` component that converts a `TextBox/TextArea` into a `HasValue<Collection<String>>` based on a regex.
  * Added support for auto commit on `BeanModelProvider` (issue 5).  
  * Added support for dirty tracking on `BeanModelProvider` and the value models it creates (issue 7).
  * Added `FormModel.allFields()` to support bindings like `enable(allFields()).when(..)` (issue 6).
  * Added support for binding metadata visibility to DOM Elements.  This improves integration with `UiBinder`.
  * Added more var-args methods for binding to multiple widgets with one binding.
  * Removed deprecated `BeanPropertySource` interface. 
  * Added `ValidationDisplayPanel` and `ValidationDisplayLabel` classes with default css for error, warning and info messages.
  * Renamed `StyleApplicator` to `ValidationStyles` and provided two static istances, one that uses `UIObject.addStyleName` and one that uses `UIObject.addStyleDependentName`. 
  * Changed validation style names (as applied by the `ValidationStyles`) from the `validation-error` form to the `validationError` form.
  * Changed default watermark style from `watermark` to `pectin-Watermark` and added default css for it.
  * Added some basic validators for lists including `NotEmptyListValidator`, `NoEmptyElementsValidator`, `NoNullElementsValidator`.
  * Fixed bug in `ListFieldValidatorImpl` where validation messages weren't always displayed in the order they were added.
  * Changed `Severity.compareTo` so the natural sort order puts the highest severity first.


== Release 0.1.3 ==
  * Added initial support for watermarks in !TextBoxes  using the `MetadataPlugin`.
  * Simplified `StyleBinder` interface in inline with issue 3
  * Changed `MetadataBinder.bindVisibility(..)` (and related methods) to `MetadataBinder.bindVisibilityOf(..)`.
  * Updated `MetadataBinder.bindValueOf(..)` to support both enabled and visibility variants.
  * Changed `Function` to operate on a single value and added `ReducingFunction` to operate on a collection of values.
  * Added `ComputedValueModel` that takes a source `ValueModel` and `Function`.
  * Added `ReducingValueModel` that takes a `ReducingFunction` and a collection of source models.
  * General clean up of the computed value models.
  * Simplified computed fields by using `Function` for single source and `ReducingFunction` for multiple source models. 
  * Fixed a bug where calling `AbstractBinder.dispose()` twice was failing
  * Updated build environment to work with Snow Leopard 

== Release 0.1.2 ==
  * Added support for GWT JUnit tests:
     * src/gwt-test/java are run using GWT JUnit infrastructure.
     * src/test/java are run using TestNG.
  * Updated `BeanModelProvider` to throw more specific exceptions when accessing bean properties instead of the generic `IllegalStateException` and friends.
  * Deprecated `BeanPropertySource` interface as it's no longer required for deferred binding (a hangover from earlier prototypes).
  * Exposed the `validate` and `runValidators` methods on the various `FieldValidator` interfaces and implementations.
  * Renamed `PluginCallback` to `BindingCallback`.
  * Javadoc updates.

== Release 0.1.1 ==
  * Removed inner classes from builders to simplify code completion options.
  * Added support for bindings values, validation and meta data state to the css style of arbitrary widgets.
  * `IndexedValidationResult` now supports validation messages without an index.
  * `ValueHolder` now always fires `ValueChangeEvents`.  
  * Various bits and pieces.
 
== Release 0.1.0 ==
  * Initial Release