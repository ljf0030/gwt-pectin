#summary A place to collect future features and design ideas.

= Future features and design ideas =

Things that would be nice:

==!SelectionPlugin== 
Bring focus/blur and field selection into the presentation layer.  `selectionModel.addSelectionHandler(...)`, `selectionModel.select(firstName)`.  A typical use case would be focussing a field with validation errors.  I would imagine something like `selectionModel.select(validationManager.getFirstFieldWithErrors())`.

==!ValidationPlugin enhancements== 
Proper async validation support, see DesignAsynchronousValidation.

Validation triggers (ON_BLUR, ON_EDIT) and clear triggers.

==UndoPlugin==
Wouldn't be too hard to implement at least basic undo/redo support.  Could also work with the selection model if required.

==Gui Actions/Commands==
!ClickHanlders that support enabled & visible state along with interceptors, delegates and listeners etc.  Should be able to do things like `enabled(action).when(...)` in the form model.  Would also update the !WidgetBinder to support `bind(action).to(button)`.  It would be nice if they supported the notion of onStart() and onFinish() and inProgress() for async operations but this is something that would need more investigation.

==Bindings==
Would probably nice to add value interceptors to the bindings.  This would be a more formalised way for watermarks to change the displayed value under certain conditions. 

==Formatted fields==
Currently formatted fields don't get a chance to re-format the value the user entered with out using a deferred command (since the binding ignores model changes during the update).  The formatted field could probably handle this internally by checking the text version with a freshly formatted version and doing the deferred command thing itself, but I'd rather not use a deferred command at all if possible.   