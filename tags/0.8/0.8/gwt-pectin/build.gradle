usePlugin(com.pietschy.gradle.gwt.GwtLibPlugin)
usePlugin('maven')

version = "0.${buildNumber}"

dependencies {
  testCompile('org.testng:testng:5.8:jdk15',
              'org.mockito:mockito-all:1.8.4')

  gwtTestCompile('junit:junit:4.7')
}

sourceSets {
  testCommon {
    compileClasspath += main.classes
  }

  test {
    // gradle doesn't have the notion of dependent sourceSets so
    // I'm manualy faking it here (and in gwtTest)...
    compileClasspath += testCommon.classes
    runtimeClasspath += testCommon.classes
  }

  gwtTest {
    compileClasspath += testCommon.classes
    runtimeClasspath += testCommon.classes
    // an egregious hack to get the testData classes and source onto the gwtTest runtime
    // classpath.  No easier way to do it that I could find in the allotted time....
    runtimeClasspath += files('src/testCommon/java')
  }
}

// we hook into the build and add SNAPSHOT to non release version numbers.
gradle.taskGraph.whenReady {taskGraph ->
  if (!taskGraph.hasTask(':gwt-pectin:release'))
  {
    version = version + '-SNAPSHOT'
  }
  println "Version: ${version}"
}


// configure out testing
test {
  useTestNG()
}
// testGwt is provided by GwtLibPlugin
check.dependsOn('testGwt')

task snapshot(dependsOn: ['build', 'uploadArchives'])

// Creates the release and increments the build number when finished.
task release(dependsOn: ['build', 'uploadArchives']) << {
  // do last..
  incrementBuildNumber(project)
}

// task for creating the gradle scripts.
task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
  gradleVersion = '0.8'
}

String getBuildNumber()
{
  return readBuildNumber(project)
}

